// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  PHARMACIST
  STAFF
  USER
}

// Add your models here
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  prescriptions Prescription[]
  sales         Sale[]
}

model Medicine {
  id          String    @id @default(cuid())
  name        String
  description String?
  sku         String    @unique
  price       Float
  stock       Int       @default(0)
  category    String
  supplier    String
  expiryDate  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  prescriptions PrescriptionItem[]
  sales        SaleItem[]
}

model Prescription {
  id          String    @id @default(cuid())
  patientId   String
  patientName String
  doctorName  String
  status      String    @default("PENDING") // PENDING, FILLED, CANCELLED
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  items       PrescriptionItem[]
}

model PrescriptionItem {
  id             String      @id @default(cuid())
  prescriptionId String
  prescription   Prescription @relation(fields: [prescriptionId], references: [id])
  medicineId     String
  medicine       Medicine    @relation(fields: [medicineId], references: [id])
  quantity       Int
  dosage         String
  instructions   String?
}

model Sale {
  id        String    @id @default(cuid())
  total     Float
  status    String    @default("COMPLETED") // COMPLETED, CANCELLED, REFUNDED
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  items     SaleItem[]
}

model SaleItem {
  id        String   @id @default(cuid())
  saleId    String
  sale      Sale     @relation(fields: [saleId], references: [id])
  medicineId String
  medicine  Medicine @relation(fields: [medicineId], references: [id])
  quantity  Int
  price     Float
}
